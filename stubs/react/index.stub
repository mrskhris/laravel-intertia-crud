import React, { useState } from 'react';
import {PlusIcon, XCircleIcon } from '@heroicons/react/24/outline';
import {ConfirmModal} from "@/Components/ui/confirm.jsx";
import {Button} from "@/Components/ui/button.jsx";
import {Input} from "@/Components/ui/input.jsx";

import { Link, router } from '@inertiajs/react';

// internal components
import Pagination from '@/Components/Pagination';
import Form from './Form';
import DataTable from "@/Components/DataTable/DataTable.jsx";

const formatDate = (date: string, format: string) => {
  return new Intl.DateTimeFormat('en-US', {
    dateStyle: 'medium',
    timeStyle: 'short',
  }).format(new Date(date));
};

const Index = ({ {{ modelLowerPlural }}, filters }) => {
  const [search, setSearch] = useState(filters.search || '');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [deleting, setDeleting] = useState(null);
  const [showBulkDeleteModal, setShowBulkDeleteModal] = useState(false);
  const [selectedIds, setSelectedIds] = useState([]);

  const columns: Column<{{ model }}>[] = [
  {{ tableColumns }}
    ,
    {
      key: 'created_at',
      label: 'Created',
      sortable: true,
      width: '200px',
      render: (row) => (
        <p>{formatDate(row.created_at, 'dd MMM yyyy, hh:mm a')}</p>
      ),
    },
    {
      key: 'actions',
      label: 'Actions',
      sortable: false,
      width: '100px',
      render: (row) => (
        <div className="flex justify-end gap-2">
          <Link
            href={route('{{ modelLowerPlural }}.show', row.id)}
            className="text-blue-600 hover:text-blue-900"
          >
            View
          </Link>
          <button
            type="button"
            className="text-red-600 hover:text-red-900"
            onClick={() => onDelete(row)}
          >
            Delete
          </button>
        </div>
      ),
    },
  ];

  const dataSpec = {
    id: "id"
  };

  const bulkActions: BulkAction = [
    {
      label: 'Delete',
      action: 'delete',
      onClick: (selectedRows) => {
        let ids = selectedRows.map((row) => row.id);

        if (ids.length) {
          setSelectedIds(ids);
          setShowBulkDeleteModal(true);
        }
      },
    },
  ];

  const handleSearch = (value) => {
    router.reload({ data: { search: value, page: 1 } });
  };

  const onDelete = ({{ modelLower }}) => {
    setDeleting({{ modelLower }});
    setShowDeleteModal(true);
  };

  const handleDelete = () => {
    router.delete(route('{{ modelLowerPlural }}.destroy', deleting?.id), {
      onSuccess: () => {
        setShowDeleteModal(false);
      },
    });
  };

  const handleBulkDelete = () => {
    router.delete(route('{{ modelLowerPlural }}.bulk-delete'), {
      data: { ids: selectedIds },
      onSuccess: () => {
        setShowBulkDeleteModal(false);
        setSelectedIds([]);
      },
    });
  };

  const handleSort = (key, direction) => {
    router.reload({ data: { sort: key, direction: direction, page: 1 } });
  };

  return (
    <div className="max-w-4xl mx-auto my-8">
      <div className="flex flex-wrap items-center justify-between sm:flex-nowrap mb-8">
        <h3 className="text-xl font-medium leading-6 text-gray-900">{{ model }}s</h3>
        <Button variant="primary" className="inline-flex" onClick={() => setShowCreateModal(true)}>
          <PlusIcon className="-ml-1 mr-2 h-5 w-5" />
          Add {{ model }}
        </Button>
      </div>

      <div className="flex flex-wrap items-center justify-end mb-4">
        <div className="w-full md:w-1/2 lg:w-1/3">
          <Input
            type="search"
            placeholder="Search {{ modelLowerPlural }}..."
            value={search}
            className="w-full"
            onChange={(e) => setSearch( e.target.value)}
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                handleSearch(search);
              }
            }}
          />
        </div>
      </div>

      {{{ modelLowerPlural }}.data.length > 0 ? (
        <div className="overflow-x-auto md:overflow-auto lg:overflow-auto text-sm">
         <DataTable
                    columns={columns}
                    data={{{ modelLowerPlural }}.data}
                    dataSpec={dataSpec}

                    onSort={handleSort}
                    bulkActions={bulkActions}
                  />

          {{{ modelLowerPlural }}.total > {{ modelLowerPlural }}.perPage && (
            <div className="mt-4 overflow-auto">
              <Pagination links={{{ modelLowerPlural }}.links} />
            </div>
          )}
        </div>
      ) : (
        <div className="text-center p-12 border-2 border-dashed border-gray-300 rounded-lg">
          <XCircleIcon className="mx-auto h-12 w-12 text-gray-400" />
          <p className="mt-2 text-sm text-gray-500">No {{ modelLowerPlural }} found.</p>
        </div>
      )}

      <Form
        {{ modelLower }}={null}
        showModal={showCreateModal}
        setShowModal={setShowCreateModal}
        onSuccess={() => {
          setShowCreateModal(false);
        }}
      />

      <ConfirmModal
        isOpen={showDeleteModal}
        title="Delete {{ model }}"
        message="Are you sure you want to delete this {{ modelLower }}?"
        buttonLabel="Delete"
        onConfirm={handleDelete}
        onClose={() => setShowDeleteModal(false)}
      />

      <ConfirmModal
        isOpen={showBulkDeleteModal}
        title="Delete {{ model }}s"
        message="Are you sure you want to delete selected {{ modelLowerPlural }}?"
        buttonLabel="Delete"
        onConfirm={handleBulkDelete}
        onClose={() => setShowBulkDeleteModal(false)}
      />
    </div>
  );
};

export default Index;
