<?php

namespace {{namespace}};

use {{modelNamespace}};
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Inertia\Inertia;
use Illuminate\Support\Facades\Validator;

class {{controllerName}} extends Controller
{
    public function index(Request $request)
    {
        $query = {{modelName}}::query();

        if ($request->has('search')) {
            $searchTerm = $request->input('search');

            $query->where(function($q) use ($searchTerm) {
                $q->where('id', 'like', "%{$searchTerm}%")
                  {{searchableFields}};
            });
        }

        if ($request->has('sort')) {
            $sortField = $request->input('sort');
            $sortDirection = $request->input('direction', 'asc');

            $query->orderBy($sortField, $sortDirection);
        } else {
            $query->latest();
        }

        ${{routePrefix}} = $query->paginate(20);

        return Inertia::render('Router', [
            'page' => '{{routePrefix}}.index'),
            '{{routePrefix}}' => ${{routePrefix}},
            'filters' => $request->only(['search', 'sort', 'direction'])
        ]);
    }

    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
{{validationRules}}
        ]);

        if ($validator->fails()) {
            return back()->withErrors($validator)->withInput();
        }

        {{modelName}}::create($validator->validated());

        return redirect()->route('{{routePrefix}}.index')
            ->with('success', '{{modelName}} created successfully.');
    }

    public function show({{modelName}} ${{modelVariable}})
    {
        return Inertia::render('Router', [
            'page' => '{{routePrefix}}.show'
            '{{modelVariable}}' => ${{modelVariable}}
        ]);
    }

    public function update(Request $request, {{modelName}} ${{modelVariable}})
    {
        $validator = Validator::make($request->all(), [
{{validationRules}}
        ]);

        if ($validator->fails()) {
            return back()->withErrors($validator)->withInput();
        }

        $data = $validator->validated();

        ${{modelVariable}}->update($data);

        return redirect()->route('{{routePrefix}}.show', ${{modelVariable}})
            ->with('success', '{{modelName}} updated successfully.');
    }

    public function destroy({{modelName}} ${{modelVariable}})
    {
        ${{modelVariable}}->delete();

        return redirect()->route('{{routePrefix}}.index')
            ->with('success', '{{modelName}} deleted successfully.');
    }

    public function bulkDelete(Request $request)
    {
        $request->validate([
            'ids' => 'required|array',
            'ids.*' => 'exists:{{routePrefix}},id'
        ]);

        {{modelName}}::whereIn('id', $request->ids)->delete();

        return redirect()->route('{{routePrefix}}.index')->with('success', 'Selected {{routePrefix}} have been deleted.');
    }
}
